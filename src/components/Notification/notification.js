import * as React from 'react';
import Box from '@mui/material/Box';
import CssBaseline from '@mui/material/CssBaseline';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemAvatar from '@mui/material/ListItemAvatar';
import ListItemText from '@mui/material/ListItemText';
import Avatar from '@mui/material/Avatar';
import moment from 'moment';
import { Col ,R} from 'reactstrap';

function refreshMessages() {
    const getRandomInt = (max) => Math.floor(Math.random() * Math.floor(max));

    return Array.from(new Array(50)).map(
        () => messageExamples[getRandomInt(messageExamples.length)],
    );
}

moment.updateLocale('en', {
    relativeTime: {
        future: 'in %s',
        past: '%s ago',
        s: 'Just now',
        m: 'A minute',
        mm: '%d minutes',
        h: 'An hour',
        hh: '%d hours',
        d: 'A day',
        dd: function (number) {
            if (number < 7) {
                return number + ' days'; // Moment uses "d" when it's just 1 day.
            } else {
                var weeks = Math.round(number / 7);
                return weeks + ' ' + (weeks > 1 ? 'weeks' : 'week');
            }
        },
        M: 'A month',
        MM: '%d months',
        y: 'A year',
        yy: '%d years',
    },
});

export default function Notification() {
    const [value, setValue] = React.useState(0);
    const ref = React.useRef(null);
    const [messages, setMessages] = React.useState(() => refreshMessages());

    React.useEffect(() => {
        ref.current.ownerDocument.body.scrollTop = 0;
        setMessages(refreshMessages());
    }, [value, setMessages]);

    return (
        <Box sx={{ pb: 5 }} ref={ref}>
            <CssBaseline />
            <List>
                {messages.map(({ primary, secondary, person, time }, index) => (
                    <ListItem button key={index + person}> 
                            <ListItemAvatar>
                                <Avatar alt="Profile Picture" src={person} />
                            </ListItemAvatar>
                            <ListItemText primary={<b>
                                {
                                    moment(time).locale('en').fromNow() === 'Just now ago'
                                        ? 'Just now'
                                        : moment().diff(moment(time), 'days') < 7 ?
                                            moment(time).locale('en').fromNow()
                                            : moment(time).format('DD/MM/YYYY')
                                }
                            </b>} secondary={secondary} />
                            
     
                    </ListItem>
                  

                ))}
            </List>
        </Box>
    );
}

const messageExamples = [
    {
        primary: 'Brunch this week?',
        secondary: "I'll be in the neighbourhood this week. Let's grab a bite to eat",
        person: '/static/images/avatar/5.jpg',
        time: moment().locale('en')
    },
    {
        primary: 'Birthday Gift',
        secondary: `Do you have a suggestion for a good present for John on his work
      anniversary. I am really confused & would love your thoughts on it.`,
        person: '/static/images/avatar/1.jpg',
        time: moment().locale('en').subtract(1, 'days')
    },
    {
        primary: 'Recipe to try',
        secondary: 'I am try out this new BBQ recipe, I think this might be amazing',
        person: '/static/images/avatar/2.jpg',
        time: moment().locale('en').subtract(2, 'days')
    },
    {
        primary: 'Yes!',
        secondary: 'I have the tickets to the ReactConf for this year.',
        person: '/static/images/avatar/3.jpg',
        time: moment().locale('en').subtract(1, 'months')
    },
    {
        primary: "Doctor's Appointment",
        secondary: 'My appointment for the doctor was rescheduled for next Saturday.',
        person: '/static/images/avatar/4.jpg',
        time: moment().locale('en').subtract(1, 'months')
    },
    {
        primary: 'Discussion',
        secondary: `Menus that are generated by the bottom app bar (such as a bottom
      navigation drawer or overflow menu) open as bottom sheets at a higher elevation
      than the bar.`,
        person: '/static/images/avatar/5.jpg',
        time: moment().locale('en').subtract(1, 'months')
    },
    {
        primary: 'Summer BBQ',
        secondary: `Who wants to have a cookout this weekend? I just got some furniture
      for my backyard and would love to fire up the grill.`,
        person: '/static/images/avatar/1.jpg',
        time: moment().locale('en').subtract(1, 'months')
    },
];
